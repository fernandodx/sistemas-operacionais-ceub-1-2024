 - Pesquise e responda. O que é um DeadLock? Quais os problemas podem acontecer em uma aplicação quando isso acontecer. 
  - Faça um exemplo de um código em java que dê Deadlock. 

deadlock ocorre quando duas ou mais threads ficam presas esperando recursos umas das outras, criando um ciclo de dependência que impede qualquer progresso.
Por exemplo:
A Thread A bloqueia o recurso 1 e espera pelo recurso 2.
A Thread B bloqueia o recurso 2 e espera pelo recurso 1.
Problemas causados pelo Deadlock:
*Congelamento da aplicação: Partes ou toda a aplicação podem parar.
*Consumo excessivo de recursos: As threads presas continuam ocupando memória e CPU.
*Perda de desempenho: O sistema pode ficar lento ou instável.
*Dificuldade de debug: Deadlocks são complicados de identificar e corrigir devido à sua natureza imprevisível.


Exemplo do código java que tenha deadlock: 

public class DeadlockExample {
    private static final Object resource1 = new Object();
    private static final Object resource2 = new Object();

    public static void main(String[] args) {
        Thread thread1 = new Thread(() -> {
            synchronized (resource1) {
                System.out.println("Thread 1: locked resource 1");

                // Simular alguma operação para dar tempo ao deadlock
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                System.out.println("Thread 1: waiting to lock resource 2");
                synchronized (resource2) {
                    System.out.println("Thread 1: locked resource 2");
                }
            }
        });

        Thread thread2 = new Thread(() -> {
            synchronized (resource2) {
                System.out.println("Thread 2: locked resource 2");

                // Simular alguma operação para dar tempo ao deadlock
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                System.out.println("Thread 2: waiting to lock resource 1");
                synchronized (resource1) {
                    System.out.println("Thread 2: locked resource 1");
                }
            }
        });

        thread1.start();
        thread2.start();
    }
}

